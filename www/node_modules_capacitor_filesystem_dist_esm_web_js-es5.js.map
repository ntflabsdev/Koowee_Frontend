{"version":3,"sources":["webpack:///node_modules/@capacitor/filesystem/dist/esm/web.js"],"names":["FilesystemWeb","arguments","DB_VERSION","DB_NAME","_writeCmds","_db","undefined","window","unavailable","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","store","objectStore","req","indexName","index","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","path","getPath","dbRequest","entry","Error","data","content","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","length","ctime","mtime","split","uri","dbIndexRequest","IDBKeyRange","only","entries","depth","match","fullPath","readdir","readDirResult","files","entryPath","stat","entryObj","deleteFile","rmdir","names","map","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","startsWith","toObj","toPathComponents","pop","join","toParentDirectory","fromObj","updateTime","readFile","file","writeFile","contents","filename","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin","_debug"],"mappings":"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","file":"node_modules_capacitor_filesystem_dist_esm_web_js-es5.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (toPath.startsWith(fromPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"]}